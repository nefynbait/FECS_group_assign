
Group_assign_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fe  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define sp 3
int main(void)
{

	unsigned char x;
	DDRC |= (1 << sp);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	84 bb       	out	0x14, r24	; 20
	
	while(1)
	{	
	
	unsigned char conbyte = 0x12;
  72:	32 e1       	ldi	r19, 0x12	; 18
	unsigned char aa = 0x10;
	unsigned char regALSB;
	while(1)
	{
		regALSB = conbyte;
  74:	93 2f       	mov	r25, r19
		for(x=0;x<8;x++){
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0b c0       	rjmp	.+22     	; 0x90 <main+0x24>
			if(regALSB & 0x80){
  7a:	99 23       	and	r25, r25
  7c:	24 f4       	brge	.+8      	; 0x86 <main+0x1a>
				PORTC |=(1<<sp);
  7e:	25 b3       	in	r18, 0x15	; 21
  80:	28 60       	ori	r18, 0x08	; 8
  82:	25 bb       	out	0x15, r18	; 21
  84:	03 c0       	rjmp	.+6      	; 0x8c <main+0x20>
			}
			else{
				PORTC &= ~(1<<sp);
  86:	25 b3       	in	r18, 0x15	; 21
  88:	27 7f       	andi	r18, 0xF7	; 247
  8a:	25 bb       	out	0x15, r18	; 21
			}
			regALSB = regALSB<<1;
  8c:	99 0f       	add	r25, r25
	unsigned char aa = 0x10;
	unsigned char regALSB;
	while(1)
	{
		regALSB = conbyte;
		for(x=0;x<8;x++){
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	88 30       	cpi	r24, 0x08	; 8
  92:	98 f3       	brcs	.-26     	; 0x7a <main+0xe>
				PORTC &= ~(1<<sp);
			}
			regALSB = regALSB<<1;
			
		}
		conbyte += aa;
  94:	30 5f       	subi	r19, 0xF0	; 240
		if(conbyte==0x62){
  96:	32 36       	cpi	r19, 0x62	; 98
  98:	69 f7       	brne	.-38     	; 0x74 <main+0x8>
					PORTC ^= (1<<PORTC6);
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	80 e4       	ldi	r24, 0x40	; 64
  9e:	89 27       	eor	r24, r25
  a0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	8e e9       	ldi	r24, 0x9E	; 158
  a6:	94 e2       	ldi	r25, 0x24	; 36
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
					_delay_ms(1500);
					break;
				}
	}
	while(1){
				conbyte -= aa;
  b4:	30 51       	subi	r19, 0x10	; 16
				regALSB = conbyte;
  b6:	93 2f       	mov	r25, r19
				for(x=0;x<8;x++){
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <main+0x66>
					if(regALSB & 0x80){
  bc:	99 23       	and	r25, r25
  be:	24 f4       	brge	.+8      	; 0xc8 <main+0x5c>
						PORTC |=(1<<sp);
  c0:	25 b3       	in	r18, 0x15	; 21
  c2:	28 60       	ori	r18, 0x08	; 8
  c4:	25 bb       	out	0x15, r18	; 21
  c6:	03 c0       	rjmp	.+6      	; 0xce <main+0x62>
					}
					else{
						PORTC &= ~(1<<sp);
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	27 7f       	andi	r18, 0xF7	; 247
  cc:	25 bb       	out	0x15, r18	; 21
					}
					regALSB = regALSB<<1;
  ce:	99 0f       	add	r25, r25
				}
	}
	while(1){
				conbyte -= aa;
				regALSB = conbyte;
				for(x=0;x<8;x++){
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	98 f3       	brcs	.-26     	; 0xbc <main+0x50>
						PORTC &= ~(1<<sp);
					}
					regALSB = regALSB<<1;
					
				}
				if(conbyte==0x52){
  d6:	32 35       	cpi	r19, 0x52	; 82
  d8:	69 f4       	brne	.+26     	; 0xf4 <main+0x88>
					PORTC ^= (1<<PORTC6);
  da:	95 b3       	in	r25, 0x15	; 21
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	89 27       	eor	r24, r25
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8e e9       	ldi	r24, 0x9E	; 158
  e6:	94 e2       	ldi	r25, 0x24	; 36
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
					_delay_ms(1500);
				}
				if(conbyte==0x12){
  f4:	32 31       	cpi	r19, 0x12	; 18
  f6:	f1 f6       	brne	.-68     	; 0xb4 <main+0x48>
					break;
				}
			}
	while(1)
	{
		conbyte += aa;
  f8:	30 5f       	subi	r19, 0xF0	; 240
				regALSB = conbyte;
  fa:	93 2f       	mov	r25, r19
				for(x=0;x<8;x++){
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0b c0       	rjmp	.+22     	; 0x116 <main+0xaa>
					if(regALSB & 0x80){
 100:	99 23       	and	r25, r25
 102:	24 f4       	brge	.+8      	; 0x10c <main+0xa0>
						PORTC |=(1<<sp);
 104:	25 b3       	in	r18, 0x15	; 21
 106:	28 60       	ori	r18, 0x08	; 8
 108:	25 bb       	out	0x15, r18	; 21
 10a:	03 c0       	rjmp	.+6      	; 0x112 <main+0xa6>
					}
					else{
						PORTC &= ~(1<<sp);
 10c:	25 b3       	in	r18, 0x15	; 21
 10e:	27 7f       	andi	r18, 0xF7	; 247
 110:	25 bb       	out	0x15, r18	; 21
					}
					regALSB = regALSB<<1;
 112:	99 0f       	add	r25, r25
			}
	while(1)
	{
		conbyte += aa;
				regALSB = conbyte;
				for(x=0;x<8;x++){
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	98 f3       	brcs	.-26     	; 0x100 <main+0x94>
					}
					regALSB = regALSB<<1;
					
				}
				
			if(conbyte==0x52)
 11a:	32 35       	cpi	r19, 0x52	; 82
 11c:	69 f7       	brne	.-38     	; 0xf8 <main+0x8c>
			{
					PORTC ^= (1<<PORTC6);
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	89 27       	eor	r24, r25
 124:	85 bb       	out	0x15, r24	; 21
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8e e9       	ldi	r24, 0x9E	; 158
 12a:	94 e2       	ldi	r25, 0x24	; 36
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xc0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xca>
 136:	00 00       	nop
 138:	9c cf       	rjmp	.-200    	; 0x72 <main+0x6>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
